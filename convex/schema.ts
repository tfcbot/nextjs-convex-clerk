import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  // Users table to store additional user information beyond Clerk's auth data
  users: defineTable({
    userId: v.string(),
    name: v.optional(v.string()),
    email: v.optional(v.string()),
    isPremium: v.boolean(),
    createdAt: v.number(),
    lastLoginAt: v.number(),
  }).index("by_user_id", ["userId"]),

  // YouTube channels connected by the user
  youtubeChannels: defineTable({
    userId: v.string(),
    channelId: v.string(),
    channelName: v.string(),
    channelUrl: v.string(),
    subscriberCount: v.optional(v.number()),
    videoCount: v.optional(v.number()),
    viewCount: v.optional(v.number()),
    lastSyncedAt: v.optional(v.number()),
    isAnalyzed: v.boolean(),
    thumbnailUrl: v.optional(v.string()),
  })
    .index("by_user_id", ["userId"])
    .index("by_channel_id", ["channelId"]),

  // Videos from the user's channel
  videos: defineTable({
    channelId: v.string(),
    videoId: v.string(),
    title: v.string(),
    description: v.optional(v.string()),
    publishedAt: v.number(),
    viewCount: v.optional(v.number()),
    likeCount: v.optional(v.number()),
    commentCount: v.optional(v.number()),
    thumbnailUrl: v.optional(v.string()),
    tags: v.optional(v.array(v.string())),
  })
    .index("by_channel_id", ["channelId"])
    .index("by_video_id", ["videoId"]),

  // Content ideas generated by AI
  contentIdeas: defineTable({
    userId: v.string(),
    title: v.string(),
    description: v.string(),
    tags: v.optional(v.array(v.string())),
    createdAt: v.number(),
    isGenerated: v.boolean(), // true if generated by AI, false if manually created
    inspirationSources: v.optional(v.array(v.string())),
    isPremium: v.boolean(), // whether this idea is only available to premium users
    category: v.optional(v.string()),
    potentialKeywords: v.optional(v.array(v.string())),
    estimatedViewership: v.optional(v.string()), // "high", "medium", "low"
  }).index("by_user_id", ["userId"]),

  // Competitor analysis
  competitors: defineTable({
    userId: v.string(),
    competitorChannelId: v.string(),
    competitorName: v.string(),
    competitorUrl: v.string(),
    subscriberCount: v.optional(v.number()),
    videoCount: v.optional(v.number()),
    viewCount: v.optional(v.number()),
    lastSyncedAt: v.optional(v.number()),
    notes: v.optional(v.string()),
    isPremium: v.boolean(), // whether this competitor analysis is only for premium users
  })
    .index("by_user_id", ["userId"])
    .index("by_competitor_id", ["competitorChannelId"]),

  // Trending topics in the user's niche
  trendingTopics: defineTable({
    userId: v.string(),
    topic: v.string(),
    description: v.optional(v.string()),
    relevanceScore: v.optional(v.number()), // 0-100 score of how relevant this is to the user
    createdAt: v.number(),
    isPremium: v.boolean(), // whether this trending topic is only for premium users
    sources: v.optional(v.array(v.string())),
  }).index("by_user_id", ["userId"]),
});

